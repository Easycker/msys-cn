#summary 第三章、基于MSYS、MingW的Windows编程教程

=开始前的准备=

MSYS开发环境可以实现完整的Windows应用程序的开发，基于其内部的Windows API函数，我们可以实现任何我们想要实现的函数而不需要安装庞大的VC、.net开发环境。至于MS为什么要推出.net开发环境呢？凭我的个人理解，主要的原因是：
 # 由于GNU推动的自由软件的发展，创造出了多门语言（包括TclTk、Python等）能够实现多种语言的专业人才能够同时开发同一个项目，实现多语言联合；
 # 由于SUN公司的Java虚拟机得到了广泛的应用；
 # 由于MFC传统对Windows API的封装效率过低，而且类的结构不符合人性化设计；

当然，这些也许只是一些片面的原因，但是最终微软设计出了.net代码开发框架，实现了以下的功能：
 # 基于.net的应用程序，实际上都是虚拟机应用程序，将代码以脚本形式封装在程序内解析执行；
 # 多种语言（VB、VC、Java、C#）的联合开发同一个项目；
 # 极大的增加了代码的体积、开发工具的尺寸和光盘的数量，感觉起来多了许多新东西；

总之，我本人对于.net是没有任何好感的，基于我们的MSYS环境同样可以实现Fortran、C、C++、Java、ADA、Objective C、Objective C++、Clisp等等语言的联合开发，同时可以更好地兼容Python、Tcltk、Ruby、Lua等脚本语言的嵌入，因为MSYS环境使用的正式开发这些语言用的gcc编译器。

MSYS的gcc中包含了完整的Windows SDK、DDK、DirectX SDK等开发包，因此我们不用像VC那样安装各种附加的SDK、DDK，同时我们可以使用微软官方的MSDN作为这些库的函数的手册，MSYS也不需要再额外的提供技术手册或者info文件。首先我们需要下载一份MSDN，如果您英语比较好或者适应了英文版的MSDN，请到这里下载徐艺波所精简的MSDN版本：

  http://www.xuyibo.org/download/14.htm

您也可以上微软官方的 VC Express 版本主页下载中文版的 MSDN，不过下载可能要花费一定的时间。
装好MSYS后，请确保您已经安装了resedit附加包：
 {{{
mpkg --install resedit
}}}

安装好以后需要进行一次重启，然后下面我们就开始Windows应用程序开发的旅程。

=第一个Win32版本Hello World=

在我们通常学习一样彻底不了解的东西的时候，通常有两种途径，一个是将该技术所涉及的所有官方文档、手册、定义都弄到手，然后专心的去研究这些手册中的东西，还有一种就是读一本别人编写的教程跟着一步一步的做。按照我以往的经验来看，这二者各有优点和缺点：

 * 采用标准或文档进行学习，缺乏有效的实践方式，不能从实践上去操作和解决问题，但是优点是能够全面的掌握知识体系，并且能够看清各个部分之间的关系。这种学习方式就好比正统的教育模式，将所有需要了解的东西一下全部灌输给学生，宁可死记硬背也要把内容都记下来，但是实际动手的时候就缺乏动力和想象力，没有激情。

 * 采用跟着某教程走的方式进行学习，优点就是动手能力强，并且在做的过程中能够提出更好的想法来解决同样的问题，利于产生创造的激情和锻炼实践能力，但是缺点也同样存在，那就是教程成了做事情必备的参考文档，一旦脱离教程就无法进行操作，同时不能逾越教程中作者个人所关注的一些领域，不利于对新领域的开拓，同时不能完整、系统的掌握知识。

当然，本系列文章当属教程类型，期待通过各种实际动手的例子让读者能够了解使用MSYS进行Windows操作系统开发的方法，同时明白控制台开发方式的优点并善于利用IDE所不拥有的优势来开发新型应用程序。下面我们本着动手为主，辅助提供各种参考资料的使用方法，让读者能够在进行教程式学习的同时能够弥补这种方式的不足。

首先我们打开MSYS，进入控制台界面，基于在OS开发系列文章第二篇（如果没有阅读过的读者请在我的博客中阅读）中的基础操作技术，我们开始Windows上最简单版本Hello World的开发方法。我们创建一个目录winhello包含我们的代码，并创建名为main.c的文件，我们开始编写代码：

首先我们需要知道，在Windows开发中我们多数时候用到的是Windows API，而这些接口的定义都可以通过简单的包含Windows.h来实现，当然，如果读者需要使用到printf函数进行辅助调试的话，同样可以包含控制台程序通常用的stdio.h、stdlib.h等头文件。
 {{{
#include <windows.h>
}}}

下面我们需要开始我们的Windows版本main函数，在Windows上主函数叫做WinMain，它的定义比较复杂，我们很难准确记住其参数，因此从现在开始，只要您开发Windows，无论是在VC中还是MSYS、MingW中，都会发现MSDN是一个很好的帮手。

我们打开MSDN，在左边的选项卡中选择索引（Index），然后在其中输入搜索‘winmain’（大小写无所谓），然后我们能打开对WinMain函数定义进行说明的页面，我们照抄其中的参数定义方式如下：
 {{{
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR lpCmd, int nCmd)
{
    return 0;
}
}}}

下面我们通过一个Windows中常见的消息框来显示一个Hello World消息，消息框产生的函数是MessageBox，在MSDN索引中搜索到后，在WinMain中输入如下的代码：
 {{{
MessageBox(0, "Hello World, MSYS !", "caption", 0);
}}}

现在复制我们前面用到的Makefile，或者凭您对Makefile的理解手工编写，得到如下内容的Makefile：
 {{{
# 配置工具链
AS=as     # 汇编器
CC=gcc    # C编译器
LD=gcc    # 链接器

# 配置工具链的调用参数
ASFLAGS=-g
CCFLAGS=-g
LDFLAGS=

# 我们目标，可用'\'换行
OBJECT=main.o
TARGET=hello.exe

# 如何编译各种目标的过程

# 默认目标（make 不带目标对象，或者make all）
all: $(TARGET)

$(TARGET) : $(OBJECT)
    $(LD) $(OBJECT) -o $(TARGET) $(LDFLAGS)

# 指定从.c文件生成.o文件的方法，$@代表输出文件，$<代表输入文件
%.o : %.c
    $(CC) $(CCFLAGS) -c -o $@ $<

%.o : %.s
    $(AS) $(ASFLAGS) -o $@ $<
}}}

然后我们执行make命令，就得到了最简单形式的Windows版本Hello World。
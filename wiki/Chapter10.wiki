#summary 第10章、基于MSYS的Windows驱动开发

= 版权信息 =

Copyright (C) 2009, 唐华欣

本内容供读者随意转载，请保留本信息即可
http://code.google.com/p/msys-cn/w/edit/Chapter10

= 1、介绍 =

==*警告：驱动程序开发对不熟悉的人来说是危险的，潜在会造成硬件的损坏和数据的丢失*==
==*请读者从这里开始三思而后行，如果造成以上描述的后果，笔者声明将不承担任何责任*==

世界上程序员总共有三种不同的工作，一种是操作系统内核开发程序员（比如微软内核部门和Linus Tovalds所从事的工作），又称核心开发者；一种是应用程序开发程序员，又称应用开发者，让用户通过该程序能够完成各种工作中需要完成的任务；最后一种就是驱动程序开发程序员，又称接口开发者，为操作系统内核和应用程序之间提供硬件和用户交互的桥梁，让内核能够通过驱动驾驭硬件从而为应用程序提供控制和访问服务。

对于每一个操作系统来说，都有一套自己独特的驱动机制，虽然各有自己的风格和自己的安全保护、加载机制，但是对于程序员来说，所要解决的问题都是相同的，那就是：

 # 在内核权限中拥有对硬件设备的访问权限;
 # 初始化硬件设备到预定的功能模式;
 # 为用户提供用户权限中操作该设备的各种指令和方法;
 # 为卸载驱动程序提供安全的出口;

以我们天天在用的网络浏览器为例，当用户输入网站地址的时候，浏览器程序获取到该信息后立即会将访问网络的信息传递给操作系统下的驱动程序，在这里，驱动程序包有两种，含协议驱动（TCP/IP协议、Socket接口）以及硬件设备驱动（网卡驱动），协议将内容转化为固定的网卡操作序列，然后该序列被输入网卡驱动程序，最终网卡通过与外界连接的网线进行通讯从而获得必要的信息，然后该信息又被逆过来再次通过这些层最终到达浏览器，浏览器对获取的数据进行处理和显示，完成了一次用户浏览网页的操作。

从上面的例子我们可以看出，对硬件的操作主要涉及到三种软件：

 # 访问驱动程序的应用程序;
 # 我们的驱动程序;
 # 操作系统内核;

在笔者长期的开发中，由于VC这个官方开发工具尺寸的庞大还有自己总是懒得装让系统变慢的.net Framework，同时MingW编译器已经足够强大到我个人在Windows上开发应用程序的每一个方面，因而已经有较长时间用MSYS+MingW环境替代掉了过去的VC 6.0开发环境。

后来由于某次项目中需要开发设备驱动，故开始研究起了XP DDK，这个工具包也是官方的，而且功能非常强大，但是问题同样是体积太大了，太占硬盘空间，用MingW + MSDN的开发环境用了多年比较顺手，所以研究了一下MingW中的Win32API结构，兴奋地发现了include目录下有ddk的目录，而且基本拥有了win2k ddk中的所有头文件和函数（少数调试指令如__try，__except仍然是缺失），所以开始研究起了Win32驱动的MingW编译器开发方法。

MingW中的ddk最早（而且现在也）是为ReactOS（一个开源的Windows操作系统克隆）操作系统开发中的驱动开发所准备的，由于ReactOS项目的目标是完全实现与Win32架构的操作系统二进制兼容，而且驱动也兼容，所以MingW中的ddk是可以用来在Windows上开发真正的本土Win32驱动的。

经过本人半年来的研究和探索，同时参考了多个论坛上的数篇文章，笔者在本文下面的篇幅中，将基于MSYS中的gcc编译器开发驱动开发中涉及到的三种程序的代码，并且将驱动开发中涉及到的各种技术和方法一一阐述，需要注意的是，本文比较怪异的介绍了Windows操作系统下用gcc（MingW）编译器开发Windows驱动的开发方法和调试方法，因而希望读者不要误以为我们是在开发Linux或者其他UNIX驱动 :)

= 2、Windows 内核模式驱动（KMD）的MSYS + MingW开发方法 =

首先我们需要编写驱动程序的代码，读者可以参考MSDN手册上，按照本系列教程中之前的多个教程的方法，通过对下面代码中所涉及到的多个函数搜索和研究，下面我们直接给出最简单的Windows WDM KMD驱动的框架代码：
 {{{

}}}